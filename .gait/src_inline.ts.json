{
    "fileName": "src/inline.ts",
    "inlineChats": {
        "c37443c2-7b6f-4f14-9884-9c34d1778b2f": {
            "inline_chat_id": "c37443c2-7b6f-4f14-9884-9c34d1778b2f",
            "fileName": "src/inline.ts",
            "content": "import * as vscode from 'vscode';\nimport * as Diff from 'diff';\nimport { v4 as uuidv4 } from 'uuid';\nimport path from 'path';\nimport fs from 'fs';\nimport { readConsolidatedGaitData, writeConsolidatedGaitData } from './types';\n\n\nexport interface InlineStartInfo {\n    fileName: string;\n    content: string;\n    lineCount: number;\n    startTimestamp: string;\n    startSelection: vscode.Position,\n    endSelection: vscode.Position,\n    selectionContent: string;\n    parent_inline_chat_id: string | null;\n}\n\nexport interface InlineChatInfo {\n    inline_chat_id: string;\n    fileName: string;\n    content: string;\n    lineCount: number;\n    startTimestamp: string;\n    startSelection: vscode.Position,\n    endSelection: vscode.Position,\n    selectionContent: string;\n    endTimestamp: string;\n    prompt: string;\n    diffs: Diff.Change[];\n    parent_inline_chat_id: string | null;\n}\n\n\nexport interface InlineMatchedRange {\n    range: vscode.Range;\n    matchedLines: string[];\n    inlineChat: InlineChatInfo;\n    similarity: number;\n}\n\nexport interface FileChats {\n    fileName: string;\n    inlineChats: { [key: string]: InlineChatInfo };\n}\n\nexport function removeInlineChatInfo(inline_chat_id: string, fileChats: FileChats): FileChats {\n    delete fileChats.inlineChats[inline_chat_id];\n    return fileChats;\n}\n\nexport function addInlineChatInfo(inlineChatInfo: InlineChatInfo, fileChats: FileChats): FileChats {\n    fileChats.inlineChats[inlineChatInfo.inline_chat_id] = inlineChatInfo;\n    return fileChats;\n}\n\nexport function filenameToRelativePath(baseName: string): string {\n    const fileName = baseName.replace(/\\//g, \"_\") + \".json\";\n    return `.gait/${fileName}`;\n}\n\nexport function filenameToStoragePath(baseName: string): string  {\n    const relativePath = filenameToRelativePath(baseName);\n\n    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n    const workspaceFolderPath = workspaceFolder?.uri.fsPath;\n\n    return `${workspaceFolderPath}/${relativePath}`;\n}\n\nexport function currentFileToStoragePath(): string | undefined {\n    const editor = vscode.window.activeTextEditor;\n    if (editor) {\n        const document = editor.document;\n        const baseName = vscode.workspace.asRelativePath(document.uri);\n        return filenameToStoragePath(baseName);\n    }\n    return undefined;\n}\n\nexport function loadFileChats(filepath: string): FileChats {\n    let storagePath: string;\n    try {\n        storagePath = path.resolve(filenameToStoragePath(filepath));\n        let fileContent = fs.readFileSync(storagePath, 'utf-8');\n        const fileChats: FileChats = JSON.parse(fileContent);\n        return fileChats;\n    } catch (error) {\n        return {\n            fileName: filepath,\n            inlineChats: {},\n        };\n    }\n}\n\nexport function dumpFileChats(fileChat: FileChats): void {\n    const filePath = path.resolve(filenameToStoragePath(fileChat.fileName));\n    const fileContent = JSON.stringify(fileChat, null, 4);\n    fs.writeFileSync(filePath, fileContent);\n}\n\nexport function writeInlineChat(inlineChatInfo: InlineChatInfo) {\n    const filepath = inlineChatInfo.fileName;\n    const gaitFolder = path.dirname(filepath);\n    const consolidatedData = readConsolidatedGaitData(gaitFolder);\n\n    consolidatedData.inlineChats[inlineChatInfo.inline_chat_id] = inlineChatInfo;\n\n    writeConsolidatedGaitData(gaitFolder, consolidatedData);\n}\n\n\n\nexport function removeInlineChat(filepath: string, inline_chat_id: string){\n    const fileChats = loadFileChats(filepath);\n    const updatedFileChats = removeInlineChatInfo(inline_chat_id, fileChats);\n    dumpFileChats(updatedFileChats);\n}\nexport function isInlineStartInfo(obj: unknown): obj is InlineStartInfo {\n\treturn (\n\t\ttypeof obj === 'object' &&\n\t\tobj !== null &&\n\t\t'fileName' in obj &&\n\t\t'content' in obj &&\n\t\t'lineCount' in obj &&\n\t\t'startTimestamp' in obj &&\n\t\t'startSelection' in obj &&\n\t\t'endSelection' in obj &&\n\t\t'selectionContent' in obj &&\n        'parent_inline_chat_id' in obj &&\n\t\ttypeof (obj as InlineStartInfo).fileName === 'string' &&\n\t\ttypeof (obj as InlineStartInfo).content === 'string' &&\n\t\ttypeof (obj as InlineStartInfo).lineCount === 'number' &&\n\t\ttypeof (obj as InlineStartInfo).startTimestamp === 'string' &&\n\t\ttypeof (obj as InlineStartInfo).startSelection === 'object' &&\n\t\ttypeof (obj as InlineStartInfo).endSelection === 'object' &&\n\t\ttypeof (obj as InlineStartInfo).selectionContent === 'string'\n\t);\n}\n\nexport function InlineStartToInlineChatInfo(inlineStartInfo: InlineStartInfo, diffs : Diff.Change[], prompt: string): InlineChatInfo {\n    return {\n        inline_chat_id :  uuidv4(),\n        fileName: inlineStartInfo.fileName,\n        content: inlineStartInfo.content,\n        lineCount: inlineStartInfo.lineCount,\n        startTimestamp: inlineStartInfo.startTimestamp,\n        startSelection: inlineStartInfo.startSelection,\n        endSelection: inlineStartInfo.endSelection,\n        selectionContent: inlineStartInfo.selectionContent,\n        endTimestamp: new Date().toISOString(),\n        prompt: prompt,\n        diffs: diffs,\n        parent_inline_chat_id: inlineStartInfo.parent_inline_chat_id,\n    };\n}",
            "lineCount": 157,
            "startTimestamp": "2024-09-24T17:00:36.154Z",
            "startSelection": {
                "line": 107,
                "character": 4
            },
            "endSelection": {
                "line": 107,
                "character": 81
            },
            "selectionContent": "consolidatedData.inlineChats[inlineChatInfo.inline_chat_id] = inlineChatInfo;",
            "endTimestamp": "2024-09-24T17:00:59.094Z",
            "prompt": "Instead of this, match the fileName up",
            "diffs": [
                {
                    "count": 107,
                    "added": false,
                    "removed": false,
                    "value": "import * as vscode from 'vscode';\nimport * as Diff from 'diff';\nimport { v4 as uuidv4 } from 'uuid';\nimport path from 'path';\nimport fs from 'fs';\nimport { readConsolidatedGaitData, writeConsolidatedGaitData } from './types';\n\n\nexport interface InlineStartInfo {\n    fileName: string;\n    content: string;\n    lineCount: number;\n    startTimestamp: string;\n    startSelection: vscode.Position,\n    endSelection: vscode.Position,\n    selectionContent: string;\n    parent_inline_chat_id: string | null;\n}\n\nexport interface InlineChatInfo {\n    inline_chat_id: string;\n    fileName: string;\n    content: string;\n    lineCount: number;\n    startTimestamp: string;\n    startSelection: vscode.Position,\n    endSelection: vscode.Position,\n    selectionContent: string;\n    endTimestamp: string;\n    prompt: string;\n    diffs: Diff.Change[];\n    parent_inline_chat_id: string | null;\n}\n\n\nexport interface InlineMatchedRange {\n    range: vscode.Range;\n    matchedLines: string[];\n    inlineChat: InlineChatInfo;\n    similarity: number;\n}\n\nexport interface FileChats {\n    fileName: string;\n    inlineChats: { [key: string]: InlineChatInfo };\n}\n\nexport function removeInlineChatInfo(inline_chat_id: string, fileChats: FileChats): FileChats {\n    delete fileChats.inlineChats[inline_chat_id];\n    return fileChats;\n}\n\nexport function addInlineChatInfo(inlineChatInfo: InlineChatInfo, fileChats: FileChats): FileChats {\n    fileChats.inlineChats[inlineChatInfo.inline_chat_id] = inlineChatInfo;\n    return fileChats;\n}\n\nexport function filenameToRelativePath(baseName: string): string {\n    const fileName = baseName.replace(/\\//g, \"_\") + \".json\";\n    return `.gait/${fileName}`;\n}\n\nexport function filenameToStoragePath(baseName: string): string  {\n    const relativePath = filenameToRelativePath(baseName);\n\n    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n    const workspaceFolderPath = workspaceFolder?.uri.fsPath;\n\n    return `${workspaceFolderPath}/${relativePath}`;\n}\n\nexport function currentFileToStoragePath(): string | undefined {\n    const editor = vscode.window.activeTextEditor;\n    if (editor) {\n        const document = editor.document;\n        const baseName = vscode.workspace.asRelativePath(document.uri);\n        return filenameToStoragePath(baseName);\n    }\n    return undefined;\n}\n\nexport function loadFileChats(filepath: string): FileChats {\n    let storagePath: string;\n    try {\n        storagePath = path.resolve(filenameToStoragePath(filepath));\n        let fileContent = fs.readFileSync(storagePath, 'utf-8');\n        const fileChats: FileChats = JSON.parse(fileContent);\n        return fileChats;\n    } catch (error) {\n        return {\n            fileName: filepath,\n            inlineChats: {},\n        };\n    }\n}\n\nexport function dumpFileChats(fileChat: FileChats): void {\n    const filePath = path.resolve(filenameToStoragePath(fileChat.fileName));\n    const fileContent = JSON.stringify(fileChat, null, 4);\n    fs.writeFileSync(filePath, fileContent);\n}\n\nexport function writeInlineChat(inlineChatInfo: InlineChatInfo) {\n    const filepath = inlineChatInfo.fileName;\n    const gaitFolder = path.dirname(filepath);\n    const consolidatedData = readConsolidatedGaitData(gaitFolder);\n\n"
                },
                {
                    "count": 1,
                    "added": false,
                    "removed": true,
                    "value": "    consolidatedData.inlineChats[inlineChatInfo.inline_chat_id] = inlineChatInfo;\n"
                },
                {
                    "count": 12,
                    "added": true,
                    "removed": false,
                    "value": "    const existingFileChats = consolidatedData.fileChats.find((fileChat: FileChats) => fileChat.fileName === filepath);\n    if (existingFileChats) {\n        existingFileChats.inlineChats[inlineChatInfo.inline_chat_id] = inlineChatInfo;\n    } else {\n        const newFileChats: FileChats = {\n            fileName: filepath,\n            inlineChats: {\n                [inlineChatInfo.inline_chat_id]: inlineChatInfo\n            }\n        };\n        consolidatedData.fileChats.push(newFileChats);\n    }\n"
                },
                {
                    "count": 49,
                    "added": false,
                    "removed": false,
                    "value": "\n    writeConsolidatedGaitData(gaitFolder, consolidatedData);\n}\n\n\n\nexport function removeInlineChat(filepath: string, inline_chat_id: string){\n    const fileChats = loadFileChats(filepath);\n    const updatedFileChats = removeInlineChatInfo(inline_chat_id, fileChats);\n    dumpFileChats(updatedFileChats);\n}\nexport function isInlineStartInfo(obj: unknown): obj is InlineStartInfo {\n\treturn (\n\t\ttypeof obj === 'object' &&\n\t\tobj !== null &&\n\t\t'fileName' in obj &&\n\t\t'content' in obj &&\n\t\t'lineCount' in obj &&\n\t\t'startTimestamp' in obj &&\n\t\t'startSelection' in obj &&\n\t\t'endSelection' in obj &&\n\t\t'selectionContent' in obj &&\n        'parent_inline_chat_id' in obj &&\n\t\ttypeof (obj as InlineStartInfo).fileName === 'string' &&\n\t\ttypeof (obj as InlineStartInfo).content === 'string' &&\n\t\ttypeof (obj as InlineStartInfo).lineCount === 'number' &&\n\t\ttypeof (obj as InlineStartInfo).startTimestamp === 'string' &&\n\t\ttypeof (obj as InlineStartInfo).startSelection === 'object' &&\n\t\ttypeof (obj as InlineStartInfo).endSelection === 'object' &&\n\t\ttypeof (obj as InlineStartInfo).selectionContent === 'string'\n\t);\n}\n\nexport function InlineStartToInlineChatInfo(inlineStartInfo: InlineStartInfo, diffs : Diff.Change[], prompt: string): InlineChatInfo {\n    return {\n        inline_chat_id :  uuidv4(),\n        fileName: inlineStartInfo.fileName,\n        content: inlineStartInfo.content,\n        lineCount: inlineStartInfo.lineCount,\n        startTimestamp: inlineStartInfo.startTimestamp,\n        startSelection: inlineStartInfo.startSelection,\n        endSelection: inlineStartInfo.endSelection,\n        selectionContent: inlineStartInfo.selectionContent,\n        endTimestamp: new Date().toISOString(),\n        prompt: prompt,\n        diffs: diffs,\n        parent_inline_chat_id: inlineStartInfo.parent_inline_chat_id,\n    };\n}"
                }
            ],
            "parent_inline_chat_id": null
        }
    }
}